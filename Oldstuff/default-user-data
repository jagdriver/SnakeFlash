#cloud-config
# vim: syntax=yaml
#

# This file is the !! SWARM MANAGER NODE !! Default Flash config.
# You can change the configuration directly in the file or
# run ./flash-config.zsh in the flash directory to be guided
# thru the setup.

# The current version of cloud-init in the Hypriot rpi-64 is 0.7.6
# When dealing with cloud-init, it is SUPER important to know the version
# I have wasted many hours creating servers to find out the module I was trying to use wasn't in the cloud-init version I had
# Documentation: http://cloudinit.readthedocs.io/en/0.7.9/index.html

# TODO: Remove sudo from all commands

# Set your hostname here, the manage_etc_hosts will update the hosts file entries as well
hostname: NODE-NAME
manage_etc_hosts: false

# You could modify this for your own user information
users:
  - name: MANAGER-NAME
    gecos: "Wavesnake Manager"
    sudo: ALL=(ALL) NOPASSWD:ALL
    shell: /bin/bash
    groups: users,docker,video,input
    #plain_text_passwd: MANAGER-PASSWORD
    passwd: MANAGER-ENCRYPTED-PASSWORD
    lock_passwd: false
    ssh_authorized_keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCdpRpqR6pSdoXVLH7pIFkVXY9KIZJVA0wfKlqvpeHD/iKl+0dVU0xRoZYO/+Bot2i0rTJdfTPjcGpgMm4rpqkLfUT6ryyGFRSMF/yObUf9vCCPlz/nRh//PQfAN+JPK61z104EeatHbQhSHuHhJPzVDBNYLhsi7O1wsOkTTtSMs1Xos28HXdB+gpKup1Uddb4lq+GkB110IN3mjHYo4Tckl5VNH9cmWBTYvyVSgzv3hIG2ur/jrQMB2dLzqkchjrKpV1VLjW4dpxNlSTRt/1eo+KCjRraBYALL8t5xiLZHSx/6mA91eQU2zBDufJKWzy93vdzd6r3DJcqDIAzQ2PFP nielsjorgennielsen@snakemacpro.local
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC6YYuWDPd8CxKYZlQ6oQiXVqvM0HXBARbl/MtokxmxIySH94liiGUn+1+lBC9qSMo5a6DcNekULSvHp4a5cj6WoOx0veJlFu+Gx5Xzu/oWcq3yIkTkI/x9sgZiLAwQgGmxfEEzY++tDHwhPzrpQsB4Xzjf8YFJ+1t25eAhBLarpsM/A9XtZ/8E7zbaCKJ81Utajp/kODyWwdK3Q4NoetUfjE6M8b8yWcjUUhQqHPpBKGghS2sG78OgazjwJSDSy7vMZ+vqs6ZsRjUIxjg9/d5iymR3qM8xR1AnXcYsjUZR7s5y3DW1boYv6f5gcPFLCJ2aYzgKQahzcL0ajJecdd33 manager@ws06
    ssh_pwauth: true
    chpasswd: { expire: false }

# # Set the locale of the system
# locale: "en_US.UTF-8"
locale: "SWARM-LOCALE"

# # Set the timezone
# # Value of 'timezone' must exist in /usr/share/zoneinfo
timezone: "TIME-ZONE"

# # Update apt packages on first boot
package_update: false
package_reboot_if_required: true
package_upgrade: false

# # Install any additional apt packages you need here
# # OBS! This is done in RUNCMD section caused by an
# # error in debian Buster NTP time.
# packages:
#   - sshfs
#   - acl
#   - dnsmasq
#   - dnsutils

# # WiFi connect to HotSpot
# # - use `wpa_passphrase SSID PASSWORD` to encrypt the psk
write_files:
  #
  # WiFi interface setup
  #
  - content: |
      allow-hotplug wlan0
      iface wlan0 inet dhcp
      wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf
      iface default inet dhcp
    path: /etc/network/interfaces.d/wlan0
  #
  # WiFi properties setup
  #
  - content: |
      country=COUNTRY-CODE
      ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
      update_config=1
      network={
        ssid="WIFI-SSID"
        psk="WIFI-PASSWD"
      }
    path: /etc/wpa_supplicant/wpa_supplicant.conf
  #
  # dhcpcd.conf static network setup
  #
  - content: |
      persistent
      # Generate Stable Private IPv6 Addresses instead of hardware based ones
      slaac private
      # static IP configuration:
      interface eth0
      static ip_address=ETH0-IP-ADDRESS/24
      #static routers=ETH0-STATIC-ROUTERS
      static domain_name_servers=ETH0-STATIC-DNS-SERVERS
      interface wlan0
      static ip_address=WLAN0-IP-ADDRESS/24
      static routers=WLAN0-STATIC-ROUTERS
      static domain_name_servers=WLAN0-STATIC-DNS-SERVERS
    path: /etc/dhcpcd.conf
  #
  # Hosts
  #
  - content: |
      127.0.1.1 NODE-NAME NODE-NAME.INTERNAL-DOMAIN-NAME
      127.0.0.1 localhost
      DNS-STRING1
      DNS-STRING2
      DNS-STRING3

      # The following lines are desirable for IPv6 capable hosts
      ::1 ip6-localhost ip6-loopback
      fe00::0 ip6-localnet
      ff00::0 ip6-mcastprefix
      ff02::1 ip6-allnodes
      ff02::2 ip6-allrouters
      ff02::3 ip6-allhosts
    path: /etc/hosts   
  #
  # Portainer
  #
  - content: |
      version: '3.7'

      services:
        agent:
          image: portainer/agent
          volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - /var/lib/docker/volumes:/var/lib/docker/volumes
          networks:
            - traefik-public
          deploy:
            mode: global
            restart_policy:
              condition: on-failure
              delay: 5s
              max_attempts: 3
              window: 120s
            placement:
              constraints: [node.platform.os == linux]

        portainer:
          image: portainer/portainer
          command: -H tcp://tasks.agent:9001 --tlsskipverify --admin-password "$$2y$$05$$/.uo0TOISIA0iObDNskHkuGHlb/74AhYeDSccTs1V.mzRC8iAYUbm"
          ports:
            - "9000:9000"
            - "8000:8000"

          volumes:
            - /etc/localtime:/etc/localtime:ro
            - /opt/containers/portainer/data:/data
          labels:
            - "traefik.enable=true"
            - "traefik.docker.network=traefik-public"

            # This section is for local http access ( at this moment this does not work )
            #- "traefik.http.routers.portainer-local.entrypoints=web"
            #- "traefik.http.routers.portainer-local.rule=Host(`portainer.wavesnake.local`)"
            #- "traefik.http.routers.portainer-local.service=portainer-local"
            ##- "traefik.http.services.portainer-local.loadbalancer.passhostheader=true"
            ##- "traefik.http.services.portainer-local.loadbalancer.sticky=true"
            #- "traefik.http.services.portainer-local.loadbalancer.server.port=9000"

            # This section is for external http access
            - "traefik.http.routers.portainer-external.entrypoints=web"
            - "traefik.http.routers.portainer-external.rule=Host(`adm.wavesnake.dk`)"
            - "traefik.http.routers.portainer-external.service=portainer-external"
            - "traefik.http.services.portainer-external.loadbalancer.server.port=9000"
            - "traefik.http.middlewares.portainer-https-redirect.redirectscheme.scheme=https"
            - "traefik.http.middlewares.portainer-https-redirect.redirectscheme.permanent=true"
            - "traefik.http.routers.portainer-external.middlewares=portainer-https-redirect"

            # This section is for external https access
            - "traefik.http.routers.portainer-secure.entrypoints=secure"
            - "traefik.http.routers.portainer-secure.rule=Host(`adm.wavesnake.dk`)"
            - "traefik.http.routers.portainer-secure.tls=true"
            - "traefik.http.routers.portainer-secure.tls.certresolver=http"
            - "traefik.http.routers.portainer-secure.service=portainer-secure"
            - "traefik.http.services.portainer-secure.loadbalancer.server.port=9000"


          networks:
            - traefik-public

          deploy:
            mode: replicated
            replicas: 1
            restart_policy:
              condition: on-failure
              delay: 5s
              max_attempts: 3
              window: 120s
            placement:
              constraints: [node.role == manager]

      networks:
        traefik-public:
          external: true
          attachable: true
    path: /opt/containers/portainer/docker-compose.yml

  #
  # Traefik traefik.yml
  #
  - content: |

      api:
        dashboard: true

      log:
        filePath: "log/traefik.log"
        level: DEBUG

      accessLog:
        filePath: "log/access.log"

      entryPoints:
        ssh2:
          address: ":2202"
        ssh3:
          address: ":2203"
        ssh4:
          address: ":2204"          
        web:
          address: ":80"
        secure:
          address: ":443"
        mosquitto:
          address: ":8210"
        mariadb:
          address: ":8211"
        mqtinternal:
          address: ":8213"
        redis:
          address: ":8214"

      providers:
        docker:
          endpoint: "unix:///var/run/docker.sock"
          exposedByDefault: false
        file:
          directory = "/opt/containers/traefik/config"
          watch = true

      certificatesResolvers:
        http:
          acme:
            email: jagdriver@hotmail.com
            storage: acme.json
            #caServer: "https://acme-staging-v02.api.letsencrypt.org/directory"
            httpChallenge:
              entryPoint: web
            #tlsChallenge: true

    path: /opt/containers/traefik/data/traefik.yml

  #
  # Traefik docker-compose.yml
  #
  - content: |
      version: '3.7'

      services:
        traefik:
          image: traefik:v2.1.1

          command:
            # This section is for Docker provider
            - "--providers.docker.endpoint=unix:///var/run/docker.sock"
            - "--providers.docker.swarmMode=true"
            - "--providers.docker.exposedbydefault=false"
            # This section is for File provider
            - "--providers.file"
            - "--providers.file.filename=traefik.yml"
            - "--providers.file.directory=/opt/containers/traefik/data"
            - "--providers.file.watch=true"

          ports:
            - 80:80
            - 443:443
            - 8210:8210
            - 8211:8211
            - 8213:8213
            - 8214:8214
            - 2202:2202
            - 2203:2203
            - 2204:2204

          volumes:
            - /opt/containers/traefik/data/traefik.yml:/traefik.yml:ro
            - /opt/containers/traefik/data/acme.json:/acme.json
            - /var/log/traefik:/log
            - /var/run/docker.sock:/var/run/docker.sock:ro

          networks:
            - traefik-public

          deploy:
            placement:
              constraints:
                - node.role == manager
            restart_policy:
              condition: on-failure
              delay: 5s
              max_attempts: 3
              window: 120s

          labels:
            - "traefik.enable=true"

            # This section is for local http access to Traefik
            - "traefik.http.routers.local.rule=Host(`traefik.wavesnake.local`)"
            - "traefik.http.routers.local.entrypoints=web"
            - "traefik.http.routers.local.service=api@internal"
            - "traefik.http.routers.local.middlewares=traefik-auth"

            # This section is for external http access to Traefik, redirected to https
            - "traefik.http.routers.api.rule=Host(`traefik.wavesnake.dk`)"
            - "traefik.http.routers.api.entrypoints=web"
            - "traefik.http.routers.api.middlewares=traefik-auth"
            - "traefik.http.middlewares.traefik-auth.basicauth.users=manager:$$apr1$$ktr40m5i$$IPyM/4bfex8WbfpmsNl.9."

            # This section is for external https access to Traefik
            - "traefik.http.middlewares.traefik-https-redirect.redirectscheme.scheme=https"
            - "traefik.http.routers.api.middlewares=traefik-https-redirect"
            - "traefik.http.routers.traefik-secure.entrypoints=secure"
            - "traefik.http.routers.traefik-secure.rule=Host(`traefik.wavesnake.dk`)"
            - "traefik.http.routers.traefik-secure.middlewares=traefik-auth"
            - "traefik.http.routers.traefik-secure.tls=true"
            - "traefik.http.routers.traefik-secure.tls.certresolver=http"
            - "traefik.http.routers.traefik-secure.service=api@internal"

      networks:
        traefik-public:
          external: true
    path: /opt/containers/traefik/docker-compose.yml
  #
  # Traefik SSH configuration file
  #
  - content: |
      tcp:
        services:
          ssh-ws02:
            loadbalancer:
              servers:
                - address: "WS02-IP-ADDRESS:22"
          ssh-ws03:
            loadbalancer:
              servers:
                - address: "WS03-IP-ADDRESS:22
          ssh-ws04:
            loadbalancer:
              servers:
                - address: "WS04-IP-ADDRESS:22"
        routers:
          ssh-route-ws02:
            entryPoints:
              - "ssh2"
            rule: "HostSNI(`*`)"
            service: ssh-ws02
          
          ssh-route-ws03:
            entryPoints:
              - "ssh3"
            rule: "HostSNI(`*`)"
            service: ssh-ws03
          
          ssh-route-ws04:
            entryPoints:
              - "ssh4"
            rule: "HostSNI(`*`)"
            service: ssh-ws04
    path: /opt/containers/traefik/config/sshconfig.yml

# These commands will be run once on first boot only
runcmd:
  # Restart Avahi daemon
  - 'logger !!! wavesnake !!! Restart avahi-deamon'  
  - 'systemctl restart avahi-daemon'
  #
  # Restart NTP, workaround for Debian Buster time initialization
  #
  - 'logger !!! wavesnake !!! Workaround for Buster error initializing date/time'
  - 'sudo date'
  - 'sudo service ntp --full-restart'
  - 'sudo sleep 15'
  - 'sudo date'
  # Create IP route between ETH0 & WLAN0
  - 'logger !!! wavesnake !!! Create bidirectional Route between WLAN0 network and ETH0 network'
  - 'sudo ip route replace ETH0-LAN via WLAN0-IP-ADDRESS'
  - 'sudo ip route replace WLAN0-LAN via ETH0-IP-ADDRESS'
  # Start WLAN0 interface and wait 10 sec.
  - 'logger !!! wavesnake !!! Start WiFi Interface' 
  - 'sudo ifup wlan0'
  - 'sudo sleep 10'
  # Update packagee index
  - 'logger !!! wavesnake !!! Update Package list'
  - 'sudo apt-get update --allow-releaseinfo-change'
  # Install packages
  - 'logger !!! wavesnake !!! Install packages'
  - 'sudo apt-get -y install acl'
  - 'sudo apt-get -y install dnsmasq'
  - 'sudo apt-get -y install dnsutils'
  - 'sudo apt-get -y install sshfs'
  - 'sudo apt-get -y install certbot'
  # Install Dynamic DNS Client
  - 'DYNAMIC-DNS'

  - 'logger !!! wavesnake !!! Set manager in docker group'
  - 'sudo usermod -aG docker $(whoami)'
   # - 'sudo usermod -aG docker manager'

  - 'logger !!! wavesnake !!! Docker Swarm Init with listen and advertise interface'
  - 'docker swarm init --listen-addr eth0:2377 --advertise-addr eth0:2377'

  - 'logger !!! wavesnake !!! Docker Node Label'
  - 'docker node update --label-add wsnode=ws07 ws07'

  - 'logger !!! wavesnake !!! Set manager as owner and set rights on home directory'
  - 'sudo cp -P /etc/skel/.[^.]* /etc/skel/* /home/manager'
  - 'sudo chown manager:manager /home/manager'
  - 'sudo chmod -R u+rwX,go+rX-w /home/manager'

  - 'logger !!! wavesnake !!! Create ssh private/public keys'
  - 'sudo mkdir /home/manager/.ssh'
  - 'sudo chown manager:manager /home/manager/.ssh'
  - 'sudo touch /home/manager/.ssh/authorized_keys'
  - 'sudo chmod 700 /home/manager/.ssh'
  - 'sudo cp -P /boot/keyfile.txt /home/manager/.ssh/authorized_keys'
  - 'sudo chown manager:manager /home/manager/.ssh/authorized_keys'
  - 'sudo chmod 600 /home/manager/.ssh/authorized_keys'
 
  - 'logger !!! wavesnake !!! Create container files'
  - 'sudo mkdir /opt/containers'
  - 'sudo chown manager:manager /opt/containers'
  # Traefik
  - 'sudo mkdir /opt/containers/traefik'
  - 'sudo mkdir /opt/containers/traefik/data'
  - 'sudo mkdir /opt/containers/traefik/config'
  - 'sudo touch /opt/containers/traefik/data/acme.json'
  - 'sudo chmod 600 /opt/containers/traefik/data/acme.json'
  # Portainer
  - 'sudo mkdir /opt/containers/portainer'
  - 'sudo mkdir /opt/containers/portainer/data'
  # Apache
  - 'sudo mkdir /opt/containers/apache'
  - 'sudo mkdir /opt/containers/apache/data'
  # Redis
  - 'sudo mkdir /opt/containers/redis'
  - 'sudo mkdir /opt/containers/redis/data'
  # Mosquitto
  - 'sudo mkdir /opt/containers/mosquitto'
  - 'sudo mkdir /opt/containers/mosquitto/data'
  # SnakeApi
  - 'sudo mkdir /opt/containers/snakeapi'
  - 'sudo mkdir /opt/containers/snakeapi/data'
  # MariaDB
  - 'sudo mkdir /opt/containers/mariadb'
  - 'sudo mkdir /opt/containers/mariadb/data'
  # Create log directories
  - 'logger !!! wavesnake !!! Create log files'
  - 'sudo mkdir /var/log/traefik'
  - 'sudo mkdir /var/log/snakelogs'
  - 'sudo mkdir /var/log/mosquitto'
  # Create Docker network
  - 'logger !!! wavesnake !!! Create Traefik network'
  - 'docker network create --driver overlay --attachable traefik-public'
  # Create Traefik Docker stack
  - 'logger !!! wavesnake !!! Instantiate Traefik Container'
  - [
       docker, stack, deploy,
       "--compose-file", "/opt/containers/traefik/docker-compose.yml",
       "traefik"
    ]
  # Create Portainer Docker stack
  - 'logger !!! wavesnake !!! Instantiate Portainer Container' 
  - [
       docker, stack, deploy,
       "--compose-file", "/opt/containers/portainer/docker-compose.yml",
       "portainer"
    ]

  - 'logger !!! wavesnake !!! End of RUNCMD'
  
  #
  # Below command requires that we know the UUID of the mounted USB stick
  # Also this must be done on the DB server
  #- 'echo "/dev/disk/by-uuid/3433-3231 /media/data vfat auto,nofail,noatime,users,rw,uid=manager,gid=manager 0 0" >> /etc/fstab'
